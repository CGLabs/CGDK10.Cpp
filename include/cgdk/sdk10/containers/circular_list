//*****************************************************************************
//*                                                                           *
//*                      Cho sanghyun's Game Classes II                       *
//*                       Ver 6.1 / Release 2012.05.28                        *
//*                                                                           *
//*                           Data Template Classes                           *
//*                                                                           *
//*                                                                           *
//*                                                                           *
//*                                                                           *
//*  This Program is programmed by Cho SangHyun. sangducks@gmail.com          *
//*  Best for Game Developement and Optimized for Game Developement.          *
//*                                                                           *
//*                   (C) 2008 CGLabs All right reserved.                     *
//*                           http://www.CGDK.co.kr                           *
//*                                                                           *
//*****************************************************************************

#pragma once
//-----------------------------------------------------------------------------
//
// CGDK::circular_list<T>
//
// 1. CGDK::circular_list란!
//     이 circular_list의 특징은 circular linked list로 구현하여 push나 pop시 
//    부하를 거의 최하수준으로 줄였다고 할수 있다. 실질적으로
//    vector와 거의 같은 수준의 부하로 줄일 수 있다.
//     node들은 circulare linked list로 연결되어 있고 head와 tail의 포인터들을
//    가지고 있다. 
//     이때 push를 하면 head의 포인터를 한칸 뒤로 밀뿐이며 pop할때는 한칸 당길
//    뿐이다. 다 이때 한칸 밀공간이 남아 있지 않으면 그때서야 생성해서 삽입한다.
//     한번 push할때 생성된 Node는 pop때 사라지지 않고 pointer만 한칸 밀어버림
//    으로써 실질적인 삭제가 일어나지 않으며 다음에 push할때 포인터를 한칸 밀어
//    버림으로써 pop을 해서 사용하지 않게된 node를 다시 사용하는 식이 된다.
//     단 중간의 node를 insert할때나 erase하거나 remove하게 될 경우 삽입이나 
//    삭제가 일어나므로 이 부분에 대해서는 기존의 circular_list와 성능이 똑같다.
//
//    * 개선된 구조.
//       std::circular_list역시 circular linked list를 사용하기는 하지만 head에 
//      해당하는 부분이 member함수로 고정되어 있다. 따라서 push/pop을 수행할 때 
//      이 앞뒤에 삽입과 삭제를 동적으로 할수 밖에 없는 구조로 제작되어 있다.
//       하지만 CGDK::circular_list는 head와 tail에 해당하는 node를 동적으로 생성하여
//      가지고 있으며 head와 tail은 이들에 대한 pointer만을 가지고 있다.
//      이런 이유로 push와 pop을 수행할 때 한칸씩 앞으로 밀거나 뒤로 미는 것이
//      가능한 circular linked list로 동작할 수 있다.
//      이럴 통해 성능에 많은 개선이 가능하다.
//
//    * 대략적인 성능개선사항은 다음과 같다.
//     
//       1) push/pop의 성능향상.
//          circular로 동작하는 linked-list로 인해 push와 pop에 엄청난 성능 
//          향상이 되었다.
//       2) stack형 pool을 사용한 default allocator.
//           insert/erase계열의 함수를 사용할 때는 push/pop과 다르게 list를 
//          연결하거나 끊는데 부하는 똑같이 수반된다. 따라서 이때는 stack형
//          pool을 가진 allocator를 통해 할당과 해제를 수행하여 성능을 높인다.
//          (물론, 제공되어지는 기본 std::allocator를 사용하면 이부분이 성능
//          은 동일하게 나올 것이다.)
//       3) sort함수의 알고리즘을 개선하여 속도를 개선했다.
//       4) Exception-safe도 옵션(Flag define)을 통해 끌수 있도록 되어 있어
//          그로 인한 추가적으로 들어가는 비용을 막아준다.
//
//    * 기능적인 개선 사항은 다음과 같다.
//
//       1) null push을 제공한다. push/pop때 꼭 값을 당장 넣지 않더라도
//          일단 push를 하여 자리를 확보한 후 그 reference를 얻어 추후에
//          그 값을 넣을 수 있도록 한다.
//       2) shrink함수를 제공한다. pop을 수행할 때 실질적으로 node를 줄이는
//          것이 아니기 때문에 프로그래머가 수동으로 크기를 줄일 수 있는
//          함수를 제공해줘야 하는데 그게 바로 이 shrink함수이다.
//          이 함수를 호출하면 쓰지않는 모든 node들은 제거해 버린다.
//     
//
// 2. CGDK::circular_list의 표준 준수 사항
//    1) (o) Common Container Standard 
//    2) (o) Reversible Standard 
//    3) (o) Sequence Container Standard 
//    4) (x) Assosiative Container Standard 
//
//
// 3. exception-safe level
//    1) Strong guarantee.
//       - 아무런 Option이 주어지지 않으면 기본적으로 strong exception safe
//         guarantee를 제공해준다.
//      -  걱 Operation을 수행할 때 exception safe확보를 위한 if문장들이 추가
//         된다.
//
//			* logic_error()
//			* domain_error()
//			* invalid_argument()
//			* length_error()
//			* out_of_range()
//			* runtime_error()
//			* overflow_error()
//			* underflow_error()
//			* range_error()
//
//    2) No guarantee (With _CGD_NO_EXCEPTION_GUARANTEE flag)
//       - flag를 설정하면 No Execption safe guarantee를 제공해줄수 있다.
//       - 추가적으로 exception처리를 하지 않거나 혹은 안정성보다 빠른 속도를
//         원할 경우 Exception Guarantee를 제거할 경우 안전을 위한 추가적인
//         if문들이 제거되어 조금 더 빠른 code를 제공해 줄수 있다.
//       - 이를 통해 inline처리되는 확률이 늘어나는 것이 속도향상의 핵심이다.
//
//
// 3. CGDK::circular_list의 추가된 옵션.
// 
//	1) 없음...
//
//		#define ...
//
//
// *주의: 이런 주석문들은 comiler에게 쓸모없는 부하를 줄수 있습니다. 따라서...
//        컴파일 시간이 느리면 이런 주석들을 모조리 지워주시기 바랍니다.
//
//
//-----------------------------------------------------------------------------
// 1) definition
#include "cgdk/sdk10/containers/_definitions.h"

// 2) allocator
#include "cgdk/sdk10/containers/_allocator.h"
#include "cgdk/sdk10/containers/_allocator_pool.h"

// 3) container
#include "cgdk/sdk10/containers/_circular_list.h"
