//*****************************************************************************
//*                                                                           *
//*                      Cho sanghyun's Game Classes II                       *
//*                       Ver 8.0 / Release 2015.01.05                        *
//*                                                                           *
//*                              CG3D D3D Classes                             *
//*                                                                           *
//*                                                                           *
//*                                                                           *
//*                                                                           *
//*  This Program is programmed by Cho SangHyun. sangduck@cgcii.co.kr         *
//*  Best for Game Developement and Optimized for Game Developement.          *
//*                                                                           *
//*                 ⓒ 2016 Cho Sanghyun All right reserved.                  *
//*                          http://www.CGCII.co.kr                           *
//*                                                                           *
//*****************************************************************************

#pragma once
//-----------------------------------------------------------------------------
//
// 1. CGNetRootClient란!
//    1) Client에 사용되게 하기 위해 Performance보다는 Client와의 동기를 중요 
//       점을 두어 다른 Program이 동작하는 중간에 Run을 실행함으로써 각종 처리
//       를 할 수 있도록 한 것이다.
//    2) 기본적으로 이것은 Connect만 지원할 뿐 Listen은 지원하지 않는다.
//    3) 소량의 연결처리르 전제로 하였으므로 Socket Manager와 Socket Pool 등은
//       지원하지 않는다.
//    4) 그래도 과거에 비해 반응속도가 크게 증가하였고 각종 Pending현상으로 인한
//       Failure를 거의 없앴다.
//
//
// 2. CGNetRoot의 핵심! Function의 기능 설명
//    1) Run   접속을 시대해온 Socket을 처리하고 I/O를 처리하는 것이다.
//             이것을 Loop에 넣어서 일정 시간간격으로 처리를 해 주어야 한다.
//             자주 불러주면 그만큼 반응속도가 빨라진다.
//
// 3. 주의 사항
//  Run을 항상 일정 시간마다 실행을 시켜 I/O에 대한 처리를 반듯이 해주어야 한다.
//
//-----------------------------------------------------------------------------
namespace CGResource
{

class CVertexdecl : 
// ****************************************************************************
// Inherited Classes)
// ----------------------------------------------------------------------------
	virtual public				ICGResource,							// (I) Resource Interface
	public						CGNameable::NString,					// (@) Nameable	
	public						ICGDeviceGraphic						// (@) Device Setting Info (Singleton)
{
// ****************************************************************************
// Constructor/Destructor)
// ----------------------------------------------------------------------------
public:
			CVertexdecl();
			CVertexdecl(DWORD p_dwFVF);
			CVertexdecl(const CVertexdecl& p_rCopy);
			CVertexdecl(const D3DVERTEXELEMENT9* p_pVertexExelment);
	virtual	~CVertexdecl();


// ****************************************************************************
// Public)
// ----------------------------------------------------------------------------
public:
	// 1) 생성 & 파괴 
			void				Create(DWORD p_dwFVF);
			void				Create(const D3DVERTEXELEMENT9* p_pVertexExelment);
			void				Duplicate(const CVertexdecl& p_rCopy);
	virtual	void				Destroy();

	// 2) 적용
			HRESULT				ApplyVertexDeclaration()				{	return m_lpDirect3DDevice->SetVertexDeclaration(m_pD3DVertexDeclaration);}

	// 3) Attribue
			bool				IsCreated() const						{	return m_pD3DVertexDeclaration.exist();}
			bool				IsDestroyed() const						{	return m_pD3DVertexDeclaration.empty();}

	// 4) Attributes
			CGPTR<D3DVERTEXDECL> GetVertexdeclaration() const			{	return m_pD3DVertexDeclaration;}

	// 5) Vertex Formats
	//		- Vertex Element를 얻어내는 함수이다.
	//		- p_pDecl은  자체적으로 메모리를 할당하거나 하지 않기 때문에 충분한
	//		  크기를 할당하여 포인터를 넣어줘야한다.
	//		- 수행중 Error가 발생하면 THROW를 던진다...
			void				GetDeclaration(D3DVERTEXELEMENT9* p_pDecl, UINT* p_pNumElements) const;

	// 6) Vertex Element유무확인
	//		- FVF로 설정된 특정한 Format이 이 VertexDecl에 존재하는지를 확인하는 함수이다.
	//		- VertexElement를 얻은 후 그 Vertex Element 중에 FVF성분이 있는지를 확인하여 있으면 TRUE를 돌려준다.
			bool				HasVertexElement(DWORD p_dwFVF) const;
			DWORD				ConvertToFVF() const;

	// 7) operation
			CVertexdecl&		operator=(const CVertexdecl& p_rhs)		{	Duplicate(p_rhs); return *this;}


// ****************************************************************************
// Protected) 
// ----------------------------------------------------------------------------
public:
	// 1) Process Render
	virtual	int					ProcessMessage(CGMSG& /*_Msg*/) override	{	return 0;}


// ****************************************************************************
// Implementation)
// ----------------------------------------------------------------------------
private:
			CGPTR<D3DVERTEXDECL>	m_pD3DVertexDeclaration;
};


}

