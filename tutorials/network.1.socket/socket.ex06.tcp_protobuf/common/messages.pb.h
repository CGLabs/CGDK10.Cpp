// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
namespace tutorial {
class SendA;
struct SendADefaultTypeInternal;
extern SendADefaultTypeInternal _SendA_default_instance_;
class SendB;
struct SendBDefaultTypeInternal;
extern SendBDefaultTypeInternal _SendB_default_instance_;
class SendC;
struct SendCDefaultTypeInternal;
extern SendCDefaultTypeInternal _SendC_default_instance_;
}  // namespace tutorial
PROTOBUF_NAMESPACE_OPEN
template<> ::tutorial::SendA* Arena::CreateMaybeMessage<::tutorial::SendA>(Arena*);
template<> ::tutorial::SendB* Arena::CreateMaybeMessage<::tutorial::SendB>(Arena*);
template<> ::tutorial::SendC* Arena::CreateMaybeMessage<::tutorial::SendC>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tutorial {

// ===================================================================

class SendA final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.SendA) */ {
 public:
  inline SendA() : SendA(nullptr) {}
  ~SendA() override;
  explicit PROTOBUF_CONSTEXPR SendA(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendA(const SendA& from);
  SendA(SendA&& from) noexcept
    : SendA() {
    *this = ::std::move(from);
  }

  inline SendA& operator=(const SendA& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendA& operator=(SendA&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendA& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendA* internal_default_instance() {
    return reinterpret_cast<const SendA*>(
               &_SendA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SendA& a, SendA& b) {
    a.Swap(&b);
  }
  inline void Swap(SendA* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendA>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendA& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendA& from) {
    SendA::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendA* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.SendA";
  }
  protected:
  explicit SendA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestValueFieldNumber = 2,
  };
  // int32 TestValue = 2;
  void clear_testvalue();
  int32_t testvalue() const;
  void set_testvalue(int32_t value);
  private:
  int32_t _internal_testvalue() const;
  void _internal_set_testvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.SendA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t testvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class SendB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.SendB) */ {
 public:
  inline SendB() : SendB(nullptr) {}
  ~SendB() override;
  explicit PROTOBUF_CONSTEXPR SendB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendB(const SendB& from);
  SendB(SendB&& from) noexcept
    : SendB() {
    *this = ::std::move(from);
  }

  inline SendB& operator=(const SendB& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendB& operator=(SendB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendB& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendB* internal_default_instance() {
    return reinterpret_cast<const SendB*>(
               &_SendB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SendB& a, SendB& b) {
    a.Swap(&b);
  }
  inline void Swap(SendB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendB& from) {
    SendB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.SendB";
  }
  protected:
  explicit SendB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestValue1FieldNumber = 2,
    kTestValue2FieldNumber = 3,
    kTestValue3FieldNumber = 4,
  };
  // int32 TestValue1 = 2;
  void clear_testvalue1();
  int32_t testvalue1() const;
  void set_testvalue1(int32_t value);
  private:
  int32_t _internal_testvalue1() const;
  void _internal_set_testvalue1(int32_t value);
  public:

  // uint32 TestValue2 = 3;
  void clear_testvalue2();
  uint32_t testvalue2() const;
  void set_testvalue2(uint32_t value);
  private:
  uint32_t _internal_testvalue2() const;
  void _internal_set_testvalue2(uint32_t value);
  public:

  // float TestValue3 = 4;
  void clear_testvalue3();
  float testvalue3() const;
  void set_testvalue3(float value);
  private:
  float _internal_testvalue3() const;
  void _internal_set_testvalue3(float value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.SendB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t testvalue1_;
    uint32_t testvalue2_;
    float testvalue3_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class SendC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.SendC) */ {
 public:
  inline SendC() : SendC(nullptr) {}
  ~SendC() override;
  explicit PROTOBUF_CONSTEXPR SendC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendC(const SendC& from);
  SendC(SendC&& from) noexcept
    : SendC() {
    *this = ::std::move(from);
  }

  inline SendC& operator=(const SendC& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendC& operator=(SendC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendC& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendC* internal_default_instance() {
    return reinterpret_cast<const SendC*>(
               &_SendC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SendC& a, SendC& b) {
    a.Swap(&b);
  }
  inline void Swap(SendC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendC& from) {
    SendC::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.SendC";
  }
  protected:
  explicit SendC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestValue3FieldNumber = 4,
    kTestValue2FieldNumber = 3,
    kTestValue1FieldNumber = 2,
  };
  // repeated int32 TestValue3 = 4;
  int testvalue3_size() const;
  private:
  int _internal_testvalue3_size() const;
  public:
  void clear_testvalue3();
  private:
  int32_t _internal_testvalue3(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_testvalue3() const;
  void _internal_add_testvalue3(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_testvalue3();
  public:
  int32_t testvalue3(int index) const;
  void set_testvalue3(int index, int32_t value);
  void add_testvalue3(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      testvalue3() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_testvalue3();

  // string TestValue2 = 3;
  void clear_testvalue2();
  const std::string& testvalue2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_testvalue2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_testvalue2();
  PROTOBUF_NODISCARD std::string* release_testvalue2();
  void set_allocated_testvalue2(std::string* testvalue2);
  private:
  const std::string& _internal_testvalue2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_testvalue2(const std::string& value);
  std::string* _internal_mutable_testvalue2();
  public:

  // int32 TestValue1 = 2;
  void clear_testvalue1();
  int32_t testvalue1() const;
  void set_testvalue1(int32_t value);
  private:
  int32_t _internal_testvalue1() const;
  void _internal_set_testvalue1(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.SendC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > testvalue3_;
    mutable std::atomic<int> _testvalue3_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr testvalue2_;
    int32_t testvalue1_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SendA

// int32 TestValue = 2;
inline void SendA::clear_testvalue() {
  _impl_.testvalue_ = 0;
}
inline int32_t SendA::_internal_testvalue() const {
  return _impl_.testvalue_;
}
inline int32_t SendA::testvalue() const {
  // @@protoc_insertion_point(field_get:tutorial.SendA.TestValue)
  return _internal_testvalue();
}
inline void SendA::_internal_set_testvalue(int32_t value) {
  
  _impl_.testvalue_ = value;
}
inline void SendA::set_testvalue(int32_t value) {
  _internal_set_testvalue(value);
  // @@protoc_insertion_point(field_set:tutorial.SendA.TestValue)
}

// -------------------------------------------------------------------

// SendB

// int32 TestValue1 = 2;
inline void SendB::clear_testvalue1() {
  _impl_.testvalue1_ = 0;
}
inline int32_t SendB::_internal_testvalue1() const {
  return _impl_.testvalue1_;
}
inline int32_t SendB::testvalue1() const {
  // @@protoc_insertion_point(field_get:tutorial.SendB.TestValue1)
  return _internal_testvalue1();
}
inline void SendB::_internal_set_testvalue1(int32_t value) {
  
  _impl_.testvalue1_ = value;
}
inline void SendB::set_testvalue1(int32_t value) {
  _internal_set_testvalue1(value);
  // @@protoc_insertion_point(field_set:tutorial.SendB.TestValue1)
}

// uint32 TestValue2 = 3;
inline void SendB::clear_testvalue2() {
  _impl_.testvalue2_ = 0u;
}
inline uint32_t SendB::_internal_testvalue2() const {
  return _impl_.testvalue2_;
}
inline uint32_t SendB::testvalue2() const {
  // @@protoc_insertion_point(field_get:tutorial.SendB.TestValue2)
  return _internal_testvalue2();
}
inline void SendB::_internal_set_testvalue2(uint32_t value) {
  
  _impl_.testvalue2_ = value;
}
inline void SendB::set_testvalue2(uint32_t value) {
  _internal_set_testvalue2(value);
  // @@protoc_insertion_point(field_set:tutorial.SendB.TestValue2)
}

// float TestValue3 = 4;
inline void SendB::clear_testvalue3() {
  _impl_.testvalue3_ = 0;
}
inline float SendB::_internal_testvalue3() const {
  return _impl_.testvalue3_;
}
inline float SendB::testvalue3() const {
  // @@protoc_insertion_point(field_get:tutorial.SendB.TestValue3)
  return _internal_testvalue3();
}
inline void SendB::_internal_set_testvalue3(float value) {
  
  _impl_.testvalue3_ = value;
}
inline void SendB::set_testvalue3(float value) {
  _internal_set_testvalue3(value);
  // @@protoc_insertion_point(field_set:tutorial.SendB.TestValue3)
}

// -------------------------------------------------------------------

// SendC

// int32 TestValue1 = 2;
inline void SendC::clear_testvalue1() {
  _impl_.testvalue1_ = 0;
}
inline int32_t SendC::_internal_testvalue1() const {
  return _impl_.testvalue1_;
}
inline int32_t SendC::testvalue1() const {
  // @@protoc_insertion_point(field_get:tutorial.SendC.TestValue1)
  return _internal_testvalue1();
}
inline void SendC::_internal_set_testvalue1(int32_t value) {
  
  _impl_.testvalue1_ = value;
}
inline void SendC::set_testvalue1(int32_t value) {
  _internal_set_testvalue1(value);
  // @@protoc_insertion_point(field_set:tutorial.SendC.TestValue1)
}

// string TestValue2 = 3;
inline void SendC::clear_testvalue2() {
  _impl_.testvalue2_.ClearToEmpty();
}
inline const std::string& SendC::testvalue2() const {
  // @@protoc_insertion_point(field_get:tutorial.SendC.TestValue2)
  return _internal_testvalue2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendC::set_testvalue2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.testvalue2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tutorial.SendC.TestValue2)
}
inline std::string* SendC::mutable_testvalue2() {
  std::string* _s = _internal_mutable_testvalue2();
  // @@protoc_insertion_point(field_mutable:tutorial.SendC.TestValue2)
  return _s;
}
inline const std::string& SendC::_internal_testvalue2() const {
  return _impl_.testvalue2_.Get();
}
inline void SendC::_internal_set_testvalue2(const std::string& value) {
  
  _impl_.testvalue2_.Set(value, GetArenaForAllocation());
}
inline std::string* SendC::_internal_mutable_testvalue2() {
  
  return _impl_.testvalue2_.Mutable(GetArenaForAllocation());
}
inline std::string* SendC::release_testvalue2() {
  // @@protoc_insertion_point(field_release:tutorial.SendC.TestValue2)
  return _impl_.testvalue2_.Release();
}
inline void SendC::set_allocated_testvalue2(std::string* testvalue2) {
  if (testvalue2 != nullptr) {
    
  } else {
    
  }
  _impl_.testvalue2_.SetAllocated(testvalue2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.testvalue2_.IsDefault()) {
    _impl_.testvalue2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tutorial.SendC.TestValue2)
}

// repeated int32 TestValue3 = 4;
inline int SendC::_internal_testvalue3_size() const {
  return _impl_.testvalue3_.size();
}
inline int SendC::testvalue3_size() const {
  return _internal_testvalue3_size();
}
inline void SendC::clear_testvalue3() {
  _impl_.testvalue3_.Clear();
}
inline int32_t SendC::_internal_testvalue3(int index) const {
  return _impl_.testvalue3_.Get(index);
}
inline int32_t SendC::testvalue3(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.SendC.TestValue3)
  return _internal_testvalue3(index);
}
inline void SendC::set_testvalue3(int index, int32_t value) {
  _impl_.testvalue3_.Set(index, value);
  // @@protoc_insertion_point(field_set:tutorial.SendC.TestValue3)
}
inline void SendC::_internal_add_testvalue3(int32_t value) {
  _impl_.testvalue3_.Add(value);
}
inline void SendC::add_testvalue3(int32_t value) {
  _internal_add_testvalue3(value);
  // @@protoc_insertion_point(field_add:tutorial.SendC.TestValue3)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SendC::_internal_testvalue3() const {
  return _impl_.testvalue3_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SendC::testvalue3() const {
  // @@protoc_insertion_point(field_list:tutorial.SendC.TestValue3)
  return _internal_testvalue3();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SendC::_internal_mutable_testvalue3() {
  return &_impl_.testvalue3_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SendC::mutable_testvalue3() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.SendC.TestValue3)
  return _internal_mutable_testvalue3();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
